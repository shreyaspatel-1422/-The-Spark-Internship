# -*- coding: utf-8 -*-
"""Task-1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RhUP5pBj_815K7xaebC1RG71hUXBpsxx

Name: **Patel Shreyaskumar V**

Role:**Data Science and Business Analytics Intern**

Task-1:**Prediction Using Supervised ML**


Simple linear regression is a regression model that estimates the relationship between one independent variable and one dependent variable using a straight line. Both variables should be quantitative
"""

# Commented out IPython magic to ensure Python compatibility.
# Importing all libraries required in this notebook
import pandas as pd
import numpy as np  
import matplotlib.pyplot as plt  
# %matplotlib inline

# Reading data from remote link
url = "http://bit.ly/w-data"
df = pd.read_csv(url)
print("Data import successfully")

df.head(20)

df.size
df.shape

# Plotting the distribution of scores
df.plot(x='Hours', y='Scores', style='o')  
plt.title('Hours vs Score')  
plt.xlabel('Hours Studied')  
plt.ylabel(' Score')  
plt.show()

# change color and change of size
plt.figure(figsize = (19,9))
df.plot(x='Hours', y='Scores', style='o' , c ="b" , alpha=0.5)  
plt.title('Hours vs Score')  
plt.xlabel('Hours Studied')  
plt.ylabel(' Score')  
plt.show()

"""**An almost linear relationship can be observed between hours and percentage scored.**

**Preparing Data**
"""

X=df.iloc[:, :-1].values
y=df.iloc[:, 1].values
from sklearn.model_selection import train_test_split
X_train, X_test,y_train,y_test = train_test_split(X ,y,
                          test_size=0.2, random_state=0)

"""**Training the model**"""

from sklearn.linear_model  import LinearRegression
regressor = LinearRegression()
regressor.fit(X_train, y_train)

#Plotting Regression Line
line = regressor.coef_*X+regressor.intercept_

#Plotting for the test data
plt.scatter(X ,y, c="g", marker ="^",s=100)
plt.xlabel('Hours Studied')
plt.ylabel(' Score')
plt.plot(X,line);
plt.show()

"""**Prediction**"""

print(X_test)
y_pred = regressor.predict(X_test)

#Comparing Actual vs Predicted
cf = pd.DataFrame({'Actual': y_test, 'Predicted':y_pred})
cf

#you can also test with your own data
hours=np.array(9.25)
print("No. of hours studied = {}".format(hours))
hours=hours.reshape(-1,1)
own_pred = regressor.predict(hours)
print("Predicted Score = {}".format(own_pred[0]))

"""**Model Evaluation**

"""

from sklearn import metrics
print('Mean Absolute Error:',
      metrics.mean_absolute_error(y_test, y_pred))

print("Name:PAtel Shreyaskumar V")
print("Task:1 DAta Science and Business Analytics Intern")